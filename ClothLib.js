class CameraControl {
	constructor(opts={}) {
		this.flySpeed = 0.001;
		this.rotateSpeed = 0.001;
		this.positionX = 0;
		this.positionY = 0;
	}
}

// Generates a grid of verticies (width x height) centered 
// at the origin and defined in row major order
//
// width:  the width of the grid to generate
// height: the height of the grid to generate
// scale:  the scaling factor to apply to the final grid (default is 1)
// 
// returns a 3*width*height size matrix 
function genClothGridPoints(width, height, scale=1) {
	var clothPoints = new Array(3*width*height);

	for (var y = 0; y < height; y++) {
		for (var x = 0; x < width; x++) {
			var idx = 3*(width*y + x);
			clothPoints[idx] = (-width/2 + x + 0.5)*scale; 
			clothPoints[idx + 1] = (height/2 - y - 0.5) *scale;
			clothPoints[idx + 2] = 0.0;
		}
	}

	return clothPoints
}

// Generates the set of points needed to define the WebGL geometry
// as a gl_TRIANGLE_STRIP
//
// width:        the width of the generated grid
// height:       the height of the generated grid
// vertexPoints: the grid points generated by genGridPoints
// 
// returns the set of verticies as a gl_TRIANGLE_STRIP that define the cloth surface 
function genClothGeometryPoints(width, height, vertexPoints) {
	var clothPoints = new Array(3*(height - 1)*(2*width + 2));

	for (var y = 0; y < height - 1; y++) {
		clothPoints[3*(y*(2*width + 2))] = vertexPoints[3*width*y];
		clothPoints[3*(y*(2*width + 2)) + 1] = vertexPoints[3*width*y + 1];
		clothPoints[3*(y*(2*width + 2)) + 2] = vertexPoints[3*width*y + 2];

		for (var x = 0; x < width; x++) {
			clothPoints[3*(y*(2*width + 2) + 2*x + 1)] = vertexPoints[3*(width*y + x)];
			clothPoints[3*(y*(2*width + 2) + 2*x + 1) + 1] = vertexPoints[3*(width*y + x)+ 1];
			clothPoints[3*(y*(2*width + 2) + 2*x + 1) + 2] = vertexPoints[3*(width*y + x) + 2];

			clothPoints[3*(y*(2*width + 2) + 2*x + 1) + 3] = vertexPoints[3*(width*(y + 1) + x)];
			clothPoints[3*(y*(2*width + 2) + 2*x + 1) + 4] = vertexPoints[3*(width*(y + 1) + x) + 1];
			clothPoints[3*(y*(2*width + 2) + 2*x + 1) + 5] = vertexPoints[3*(width*(y + 1) + x) + 2];
		}

		clothPoints[3*(y*(2*width + 2) + 2*width + 1)] = vertexPoints[3*(width*(y + 1) + width - 1)];
		clothPoints[3*(y*(2*width + 2) + 2*width + 1) + 1] = vertexPoints[3*(width*(y + 1) + width - 1) + 1];
		clothPoints[3*(y*(2*width + 2) + 2*width + 1) + 2] = vertexPoints[3*(width*(y + 1) + width - 1) + 2];
	}

	return clothPoints;
}

// Helper function to print the verticies stored at each index of an array
//
// array: the array to print
function printVertexArray(array) {
	for (var i = 0; i < array.length; i = i + 3) {
		console.log("(".concat(array[i], " ",
							  array[i + 1], " ",
							  array[i + 2]), ") vertex number = ", i/3);
	}
}

